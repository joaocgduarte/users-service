// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/plagioriginal/user-microservice/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RefreshTokenRepository is an autogenerated mock type for the RefreshTokenRepository type
type RefreshTokenRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *RefreshTokenRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByToken provides a mock function with given fields: ctx, token
func (_m *RefreshTokenRepository) GetByToken(ctx context.Context, token uuid.UUID) (domain.RefreshToken, error) {
	ret := _m.Called(ctx, token)

	var r0 domain.RefreshToken
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.RefreshToken); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(domain.RefreshToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUUID provides a mock function with given fields: ctx, id
func (_m *RefreshTokenRepository) GetByUUID(ctx context.Context, id uuid.UUID) (domain.RefreshToken, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.RefreshToken
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.RefreshToken); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.RefreshToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, token
func (_m *RefreshTokenRepository) Store(ctx context.Context, token domain.RefreshToken) (domain.RefreshToken, error) {
	ret := _m.Called(ctx, token)

	var r0 domain.RefreshToken
	if rf, ok := ret.Get(0).(func(context.Context, domain.RefreshToken) domain.RefreshToken); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(domain.RefreshToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.RefreshToken) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
