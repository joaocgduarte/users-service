// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/plagioriginal/user-microservice/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RoleRepository is an autogenerated mock type for the RoleRepository type
type RoleRepository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx
func (_m *RoleRepository) Fetch(ctx context.Context) ([]domain.Role, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Role
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Role); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySlug provides a mock function with given fields: ctx, slug
func (_m *RoleRepository) GetBySlug(ctx context.Context, slug string) (domain.Role, error) {
	ret := _m.Called(ctx, slug)

	var r0 domain.Role
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Role); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(domain.Role)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUUID provides a mock function with given fields: ctx, _a1
func (_m *RoleRepository) GetByUUID(ctx context.Context, _a1 uuid.UUID) (domain.Role, error) {
	ret := _m.Called(ctx, _a1)

	var r0 domain.Role
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.Role); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(domain.Role)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, role
func (_m *RoleRepository) Store(ctx context.Context, role domain.Role) (domain.Role, error) {
	ret := _m.Called(ctx, role)

	var r0 domain.Role
	if rf, ok := ret.Get(0).(func(context.Context, domain.Role) domain.Role); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Get(0).(domain.Role)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Role) error); ok {
		r1 = rf(ctx, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
