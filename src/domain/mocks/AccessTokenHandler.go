// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	jwt "github.com/golang-jwt/jwt"
	domain "github.com/plagioriginal/user-microservice/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AccessTokenHandler is an autogenerated mock type for the AccessTokenHandler type
type AccessTokenHandler struct {
	mock.Mock
}

// DeleteRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *AccessTokenHandler) DeleteRefreshToken(ctx context.Context, refreshToken string) bool {
	ret := _m.Called(ctx, refreshToken)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GenerateTokens provides a mock function with given fields: ctx, user
func (_m *AccessTokenHandler) GenerateTokens(ctx context.Context, user *domain.User) (domain.TokenResponse, error) {
	ret := _m.Called(ctx, user)

	var r0 domain.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) domain.TokenResponse); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(domain.TokenResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserIDFromToken provides a mock function with given fields: token
func (_m *AccessTokenHandler) GetUserIDFromToken(token *jwt.Token) (uuid.UUID, error) {
	ret := _m.Called(token)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func(*jwt.Token) uuid.UUID); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRoleFromToken provides a mock function with given fields: token
func (_m *AccessTokenHandler) GetUserRoleFromToken(token *jwt.Token) (string, error) {
	ret := _m.Called(token)

	var r0 string
	if rf, ok := ret.Get(0).(func(*jwt.Token) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*jwt.Token) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsJWTokenValid provides a mock function with given fields: token
func (_m *AccessTokenHandler) IsJWTokenValid(token *jwt.Token) bool {
	ret := _m.Called(token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*jwt.Token) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ParseJWT provides a mock function with given fields: tokenString
func (_m *AccessTokenHandler) ParseJWT(tokenString string) (*jwt.Token, error) {
	ret := _m.Called(tokenString)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshAllTokens provides a mock function with given fields: ctx, askedRefreshToken
func (_m *AccessTokenHandler) RefreshAllTokens(ctx context.Context, askedRefreshToken uuid.UUID) (domain.TokenResponse, error) {
	ret := _m.Called(ctx, askedRefreshToken)

	var r0 domain.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) domain.TokenResponse); ok {
		r0 = rf(ctx, askedRefreshToken)
	} else {
		r0 = ret.Get(0).(domain.TokenResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, askedRefreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
